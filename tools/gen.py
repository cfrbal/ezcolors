import os
import inspect
import pathlib
from _ezcolors_defs import _ezcolors_codes 

# Define Paths
PROJECT_ROOT = pathlib.Path(__file__).parent.parent
SRC_DIR = PROJECT_ROOT / "src"
TEST_DIR = PROJECT_ROOT / "test"
INIT_PATH = SRC_DIR / "__init__.py"
STUB_PATH = SRC_DIR / "ezcolors.pyi"
IMPLEMENTATION_PATH = SRC_DIR / "ezcolors.py"
# --- Path for the generated test data file ---
TEST_DATA_PATH = TEST_DIR / "functions_to_test_data.py" 

# --- Helper Functions (get_codes_and_names, sanitize_for_docstring) ---
def get_codes_and_names():
    """Extracts (desired_func_name, code_str, constant_name) tuples."""
    codes = []
    endc_code = None
    for name, code in vars(_ezcolors_codes).items():
        if name.isupper() and isinstance(code, str) and code.startswith('\033'):
            if name == 'ENDC':
                endc_code = code
                continue # Don't generate a function for ENDC itself

            func_name = name.lower()
            if func_name.startswith('ok'):
                func_name = func_name[2:]

            codes.append((func_name, code, name))

    if endc_code is None:
        raise ValueError("ENDC code not found in _ezcolors_codes")

    codes.sort(key=lambda x: x[0])
    return codes, endc_code

def sanitize_for_docstring(code_str):
    """Replaces escape chars for display in docstrings."""
    return code_str.replace('\033', '<ESC>')

# --- File Writing Functions ---

def write_implementation_file(code_info, endc_code):
    """Generates the src/ezcolors.py file with explicit functions."""
    lines = [
        # ... (header lines) ...
        f"ENDC = {endc_code!r}",
        "",
    ]

    for func_name, code_str, constant_name in code_info:
        sanitized_code = sanitize_for_docstring(code_str)
        docstring = f'"""Wraps the input string with the \'{constant_name}\' ANSI code ({sanitized_code})."""'
        func_def = [
            f"def {func_name}(text: object) -> str:",
            f"    {docstring}",
            f"    # Explicitly convert to string",
            f"    string_to_color = str(text)",
            f"    return f\"{code_str}{{string_to_color}}{{ENDC}}\"",
            "",
        ]
        lines.extend(func_def)

    IMPLEMENTATION_PATH.parent.mkdir(parents=True, exist_ok=True)
    with open(IMPLEMENTATION_PATH, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

    print(f"Generated implementation file at {IMPLEMENTATION_PATH}")

    
def write_all_to_init(names):
    """Writes the __all__ list to __init__.py."""
    all_names = sorted(list(set(['ENDC'] + [name for name, _, _ in names])))

    INIT_PATH.parent.mkdir(parents=True, exist_ok=True)

    # Create __init__.py if it does not exist, adding header
    if not INIT_PATH.exists():
         with open(INIT_PATH, "w", encoding="utf-8") as f:
              f.write("# -*- coding: utf-8 -*-\n")
              f.write("# Generated by tools/gen_implementation.py. DO NOT EDIT MANUALLY.\n")
              f.write('"""ezcolors package."""\n\n')


    # Read existing content, filter out old __all__
    try:
        with open(INIT_PATH, "r", encoding="utf-8") as f:
            lines = f.readlines()
    except FileNotFoundError:
         lines = [] # Should not happen after check above, but safer

    lines = [line for line in lines if not line.strip().startswith("__all__")]
    # Ensure newline before __all__ if file wasn't empty
    if lines and not lines[-1].endswith('\n'):
        lines[-1] += '\n'
    if lines and lines[-1] != '\n':
         lines.append('\n')


    # Append new __all__
    lines.append("__all__ = [\n")
    for name in all_names:
        lines.append(f"    '{name}',\n")
    lines.append("]\n")

    with open(INIT_PATH, "w", encoding="utf-8") as f:
        f.writelines(lines)

    print(f"Updated __all__ in {INIT_PATH}")

def write_stub_file(code_info, endc_code):
    """Generates the src/ezcolors.pyi stub file."""
    stub_lines = [
        "# -*- coding: utf-8 -*-",
        "# Generated by tools/gen_implementation.py. DO NOT EDIT MANUALLY.",
        "from typing import Final", # Use Final for constants
        "",
        f"ENDC: Final[str] = ...", # Stub for ENDC
        "",
    ]
    all_names = sorted([name for name, _, _ in code_info])

    for func_name in all_names:
        # Match the implementation's type hint
        stub_lines.append(f"def {func_name}(text: object) -> str: ...\n")

    STUB_PATH.parent.mkdir(parents=True, exist_ok=True)
    with open(STUB_PATH, "w", encoding="utf-8") as f:
        f.write("\n".join(stub_lines))

    print(f"Generated stub file at {STUB_PATH}")


def write_test_data_file(code_info):
    """Generates the test/functions_to_test_data.py file."""
    all_func_names = sorted([name for name, _, _ in code_info])

    # Create the necessary import statement string
    import_list_str = ",\n    ".join(all_func_names)
    # Imports needed within the *generated* test data file
    imports = f"""\
# -*- coding: utf-8 -*-
# Generated by tools/gen_implementation.py. DO NOT EDIT MANUALLY.
# This file imports generated ezcolors functions and provides a list for tests.

import sys

# Attempt to import from the main ezcolors module
# This assumes ezcolors is installed or src is in PYTHONPATH when tests run
try:
    from ezcolors import (
        {import_list_str}
    )
    _IMPORT_SUCCESS = True
except ImportError as e:
    # Provide a helpful message if ezcolors isn't installed/found
    print(f"ERROR in {__file__}: Failed to import functions from 'ezcolors'.", file=sys.stderr)
    print("Ensure 'ezcolors' is installed correctly (e.g., 'pip install -e .').", file=sys.stderr)
    print(f"Original error: {{e}}", file=sys.stderr)
    _IMPORT_SUCCESS = False
    # Define empty list so importing file doesn't crash tests immediately
    functions_to_test = []

""" # End imports f-string

    # Create the list definition string - only if imports succeeded
    func_test_list_str = ",\n    ".join(all_func_names)
    functions_to_test_def = f"""\
# List of functions for pytest parametrization
# This list is only populated if the imports above succeeded.
functions_to_test = [
    {func_test_list_str}
] if _IMPORT_SUCCESS else []
""" # End list def f-string

    # Combine the parts
    test_data_content = imports + "\n" + functions_to_test_def

    TEST_DATA_PATH.parent.mkdir(parents=True, exist_ok=True)
    with open(TEST_DATA_PATH, "w", encoding="utf-8") as f:
        f.write(test_data_content)

    print(f"Generated test data file at {TEST_DATA_PATH}")

# --- Main Execution ---
def main():
    print("Generating ezcolors implementation, stubs, and test data...")
    code_info, endc_code = get_codes_and_names()

    write_implementation_file(code_info, endc_code)
    write_stub_file(code_info, endc_code)
    write_all_to_init(code_info)
    write_test_data_file(code_info)

    print("Generation complete.")
if __name__ == "__main__":
    main()